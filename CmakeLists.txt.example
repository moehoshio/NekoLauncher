cmake_minimum_required(VERSION 3.20)
project(NekoLc LANGUAGES CXX)

# ================
# === Config ====
# ================


# Package path. e.g. vcpkg
set(LIBRARY_DIRS "/path/to/dev/vcpkg/installed/x64-windows")
# Qt path
set(Qt6_DIR "/path/to/Qt/6.6.1/msvc2019_64")

set(STL_DIR "/path/to/STL")

# Note: Use ':' as the separator on Unix systems
set(CMAKE_PREFIX_PATH "${Qt6_DIR};${LIBRARY_DIRS}")
set(CMAKE_AUTOMOC ON)

option(BUILD_TESTING "Build tests" ON)

# ================
# === Add Src ====
# ================

# Include directories
list(APPEND INCLUDE_DIRS
    ${CMAKE_SOURCE_DIR}/src/include
    ${CMAKE_SOURCE_DIR}/src/include/library
    ${LIBRARY_DIRS}/include
    ${Qt6_DIR}/include
    ${STL_DIR}/include
)

# Src files
list(APPEND SRCFILES
    # To ensure that qt moc can locate this file
    ${CMAKE_SOURCE_DIR}/src/include/neko/ui/windows/logViewerWindow.hpp
    ${CMAKE_SOURCE_DIR}/src/include/neko/ui/windows/nekoWindow.hpp

    # Ui
    ${CMAKE_SOURCE_DIR}/src/neko/ui/windows/nekoWindow.cpp
    ${CMAKE_SOURCE_DIR}/src/neko/ui/windows/logViewerWindow.cpp
    ${CMAKE_SOURCE_DIR}/src/neko/ui/widgets/headbarWidget.cpp
    ${CMAKE_SOURCE_DIR}/src/neko/ui/widgets/pixmapWidget.cpp
    ${CMAKE_SOURCE_DIR}/src/neko/ui/pages/homePage.cpp
    ${CMAKE_SOURCE_DIR}/src/neko/ui/pages/loadingPage.cpp
    ${CMAKE_SOURCE_DIR}/src/neko/ui/pages/settingPages.cpp
    ${CMAKE_SOURCE_DIR}/src/neko/ui/dialogs/hintDialog.cpp
    ${CMAKE_SOURCE_DIR}/src/neko/ui/dialogs/inputDialog.cpp

    # Network
    ${CMAKE_SOURCE_DIR}/src/neko/network/network.cpp

    # Functions
    ${CMAKE_SOURCE_DIR}/src/neko/function/archiverZip.cpp

    # Core
    ${CMAKE_SOURCE_DIR}/src/neko/core/launcherProcess.cpp

    ${CMAKE_SOURCE_DIR}/src/neko/main.cpp
)

# Platform-specific source files
if(WIN32)
    list(APPEND SRCFILES
        ${CMAKE_SOURCE_DIR}/src/platform/windows/memoryinfo_windows.cpp
        ${CMAKE_SOURCE_DIR}/src/platform/windows/platform_windows.cpp
    )
elseif(APPLE)
    list(APPEND SRCFILES 
        ${CMAKE_SOURCE_DIR}/src/platform/unix/macos/memoryinfo_macos.cpp
        ${CMAKE_SOURCE_DIR}/src/platform/unix/platform_unix.cpp
    )
elseif(UNIX)
    list(APPEND SRCFILES 
        ${CMAKE_SOURCE_DIR}/src/platform/unix/linux/memoryinfo_linux.cpp
        ${CMAKE_SOURCE_DIR}/src/platform/unix/platform_unix.cpp
    )
endif()


# ================
# === Library ====
# ================

# Find required packages
# Note: Make sure you have installed the required packages via package manager or manually installed and linked them
find_package(Boost REQUIRED COMPONENTS system process)
find_package(OpenSSL REQUIRED)
find_package(CURL REQUIRED)
find_package(Qt6 REQUIRED COMPONENTS Core Gui Widgets)
find_package(minizip-ng CONFIG REQUIRED)

if(OpenSSL_FOUND)
    message(STATUS "OpenSSL found: ${OPENSSL_VERSION}")
    add_definitions(-DNEKO_ENABLE_HASH_SUPPORT)
else()
    message(FATAL_ERROR "OpenSSL not found!")
endif()


# ================
# ====  Test  ====
# ================

if(BUILD_TESTING)
    enable_testing()
    # api to json
    add_executable(api_tojson_test "test/api_tojson_test.cpp")
    add_test(NAME test_api_tojson COMMAND api_tojson_test)
    target_include_directories(api_tojson_test PRIVATE ${INCLUDE_DIRS})
    target_compile_features(api_tojson_test PRIVATE cxx_std_20)
endif()



# ================
# ====  Info  ====
# ================

# default build type to Release
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build.")
endif()

# Get the current git commit ID and build time
string(TIMESTAMP BUILD_TIME "%Y%m%d%H%M%S" UTC)
execute_process(COMMAND git rev-parse --short HEAD OUTPUT_VARIABLE GIT_COMMIT_ID OUTPUT_STRIP_TRAILING_WHITESPACE)
add_definitions(
    -DBUILD_TIME="${BUILD_TIME}"
    -DGIT_COMMIT_ID="${GIT_COMMIT_ID}"
)


# ================
# == Executable ==
# ================

# Add the executable target
add_executable(NekoLc ${SRCFILES})

# Set the target properties
target_include_directories(NekoLc PRIVATE ${INCLUDE_DIRS})
target_compile_features(NekoLc PRIVATE cxx_std_20)

# Link libraries
target_link_libraries(NekoLc PRIVATE 
    # Qt
    Qt6::Core Qt6::Widgets Qt6::Gui
    # OpenSSL
    OpenSSL::SSL OpenSSL::Crypto
    # libcurl
    CURL::libcurl
    # Boost
    Boost::system Boost::process
    # minizip-ng
    MINIZIP::minizip-ng
)


# Os-specific settings
if(WIN32)
    # Set not to use the console window
    if(CMAKE_BUILD_TYPE STREQUAL "Release")
        set_target_properties(NekoLc PROPERTIES WIN32_EXECUTABLE TRUE)
    endif()
    target_sources(NekoLc PRIVATE resource/windows/icon.rc)

elseif(APPLE)


    # Set the application bundle properties for macOS
    if(CMAKE_BUILD_TYPE STREQUAL "Release")
        set_target_properties(NekoLc PROPERTIES
            MACOSX_BUNDLE TRUE
            MACOSX_BUNDLE_BUNDLE_NAME "com.moehoshio.NekoLauncher"
            # MACOSX_BUNDLE_ICON_FILE "NekoLc.icns"
            MACOSX_BUNDLE_INFO_PLIST ${CMAKE_SOURCE_DIR}/resource/macos/Info.plist
        )
    endif()
    
    set(MACOSX_ICON ${CMAKE_SOURCE_DIR}/resource/macos/NekoLc.icns)
    target_sources(NekoLc PRIVATE ${MACOSX_ICON})
    set_source_files_properties(${MACOSX_ICON} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")

elseif(UNIX)

    # Set the executable properties for Linux
    set_target_properties(NekoLc PROPERTIES
        OUTPUT_NAME "NekoLc"
        PREFIX ""
        SUFFIX ""
    )

    # Add a custom command to copy the icon file to the resource directory
    add_custom_command(TARGET NekoLc POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/resource/linux/icon.png ${CMAKE_BINARY_DIR}/icon.png
        COMMENT "Copying icon.png to build directory"
    )

endif() # os
        

# ================
# === Install ====
# ================

# Install rules
install(TARGETS NekoLc
    RUNTIME DESTINATION .
    BUNDLE DESTINATION .
)

# Install configuration and resource files
install(FILES ${CMAKE_SOURCE_DIR}/src/config.ini
    DESTINATION .
)

# Install language files
install(FILES 
    ${CMAKE_SOURCE_DIR}/src/lang/en.json
    ${CMAKE_SOURCE_DIR}/src/lang/zh_tw.json
    ${CMAKE_SOURCE_DIR}/src/lang/zh_cn.json
    DESTINATION lang
)

# Install image files
install(FILES ${CMAKE_SOURCE_DIR}/resource/img/loading.gif
    DESTINATION img
)